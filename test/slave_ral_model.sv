/*
    THIS MODEL IS GENERATED BY SCRIPT AUTOMATICALLY
*/

`ifndef SLAVE_RAL_MODEL_SV
`define SLAVE_RAL_MODEL_SV

class reg_slave_ID extends uvm_reg;
  rand uvm_reg_field ID;

  `uvm_object_utils_begin(reg_slave_ID)
    `uvm_field_object(ID, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="reg_slave_ID");
    super.new(name, 32, UVM_CVR_ALL);
  endfunction

  virtual function void build();
    ID = uvm_reg_field::type_id::create("ID");
    ID.configure(.parent(this), .size(32), .lsb_pos(0),
                               .access("RO"), .volatile(0), .reset(32'hDEADBEEF),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_slave_ID

class reg_slave_Clock extends uvm_reg;
  rand uvm_reg_field res_0;
  rand uvm_reg_field EN;
  rand uvm_reg_field FREQ;
  rand uvm_reg_field DIV;

  `uvm_object_utils_begin(reg_slave_Clock)
    `uvm_field_object(res_0, UVM_ALL_ON)
    `uvm_field_object(EN, UVM_ALL_ON)
    `uvm_field_object(FREQ, UVM_ALL_ON)
    `uvm_field_object(DIV, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="reg_slave_Clock");
    super.new(name, 32, UVM_CVR_ALL);
  endfunction

  virtual function void build();
    res_0 = uvm_reg_field::type_id::create("res_0");
    res_0.configure(.parent(this), .size(27), .lsb_pos(5),
                               .access("RO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(0), .individually_accessible(0));
    EN = uvm_reg_field::type_id::create("EN");
    EN.configure(.parent(this), .size(1), .lsb_pos(4),
                               .access("RW"), .volatile(0), .reset(32'h1),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    FREQ = uvm_reg_field::type_id::create("FREQ");
    FREQ.configure(.parent(this), .size(2), .lsb_pos(2),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    DIV = uvm_reg_field::type_id::create("DIV");
    DIV.configure(.parent(this), .size(2), .lsb_pos(0),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_slave_Clock

class reg_slave_TIMER extends uvm_reg;
  rand uvm_reg_field res_0;
  rand uvm_reg_field START;
  rand uvm_reg_field ENABLE;
  rand uvm_reg_field COUNTER;

  `uvm_object_utils_begin(reg_slave_TIMER)
    `uvm_field_object(res_0, UVM_ALL_ON)
    `uvm_field_object(START, UVM_ALL_ON)
    `uvm_field_object(ENABLE, UVM_ALL_ON)
    `uvm_field_object(COUNTER, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="reg_slave_TIMER");
    super.new(name, 32, UVM_CVR_ALL);
  endfunction

  virtual function void build();
    res_0 = uvm_reg_field::type_id::create("res_0");
    res_0.configure(.parent(this), .size(26), .lsb_pos(6),
                               .access("RO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(0), .individually_accessible(0));
    START = uvm_reg_field::type_id::create("START");
    START.configure(.parent(this), .size(1), .lsb_pos(5),
                               .access("WO"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    ENABLE = uvm_reg_field::type_id::create("ENABLE");
    ENABLE.configure(.parent(this), .size(1), .lsb_pos(4),
                               .access("RW"), .volatile(0), .reset(32'h0),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
    COUNTER = uvm_reg_field::type_id::create("COUNTER");
    COUNTER.configure(.parent(this), .size(4), .lsb_pos(0),
                               .access("RW"), .volatile(0), .reset(32'hF),
                               .has_reset(1), .is_rand(1), .individually_accessible(0));
  endfunction
endclass : reg_slave_TIMER

class block_slave_control extends uvm_reg_block;
  rand reg_slave_ID ID;
  rand reg_slave_Clock Clock;

  `uvm_object_utils_begin(block_slave_control)
    `uvm_field_object(ID, UVM_ALL_ON)
    `uvm_field_object(Clock, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="block_slave_control");
    super.new(name, UVM_CVR_ALL);
  endfunction

  function void build();
    default_map = create_map("default_map", 32'h00000000, 4, UVM_LITTLE_ENDIAN);

    ID = reg_slave_ID::type_id::create("ID");
    ID.configure(this, null, "");
    ID.build();
    default_map.add_reg(ID, 32'h00, "RO");

    Clock = reg_slave_Clock::type_id::create("Clock");
    Clock.configure(this, null, "");
    Clock.build();
    default_map.add_reg(Clock, 32'h04, "RW");
  endfunction
endclass : block_slave_control

class block_slave_common extends uvm_reg_block;
  rand reg_slave_TIMER TIMER;

  `uvm_object_utils_begin(block_slave_common)
    `uvm_field_object(TIMER, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="block_slave_common");
    super.new(name, UVM_CVR_ALL);
  endfunction

  function void build();
    default_map = create_map("default_map", 32'h00000100, 4, UVM_LITTLE_ENDIAN);

    TIMER = reg_slave_TIMER::type_id::create("TIMER");
    TIMER.configure(this, null, "");
    TIMER.build();
    default_map.add_reg(TIMER, 32'h00, "RW");
  endfunction
endclass : block_slave_common

class slave_ral_model extends uvm_reg_block;
  rand block_slave_control control;
  rand block_slave_common common;

  `uvm_object_utils_begin(slave_ral_model)
    `uvm_field_object(control, UVM_ALL_ON)
    `uvm_field_object(common, UVM_ALL_ON)
  `uvm_object_utils_end

  function new(string name="slave_ral_model");
    super.new(name);
  endfunction

  function void build();
    default_map = create_map("default_map", 0, 4, UVM_LITTLE_ENDIAN);

    control = block_slave_control::type_id::create("control");
    control.configure(this);
    control.build();
    default_map.add_submap(control.default_map, 32'h00000000);

    common = block_slave_common::type_id::create("common");
    common.configure(this);
    common.build();
    default_map.add_submap(common.default_map, 32'h00000100);
  endfunction
endclass : slave_ral_model

`endif